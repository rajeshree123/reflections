what happens when you initialize a repository? why do you need to do it

when we inititalize a repository a new .git file will be created
and if we type the the comand git log we won't get any commits since there will not be any changes made to it 
since it was created at that time and if we add anything to that repository than only we can get a commit message.
To initialize a repository we only have to type 'git init' in  git bash.


How is the staging area different from the working directory and the repository? What value do you think it offers?

staging area is where we are going to commit changes.
whatever the changes we have committed will be displayed in the staging area


How can you use the staging area to make sure you have one commit per logical change?

we use commands like 'git diff --staged'
and 'git diff' and 'git diff commit1 commit2' to check how many changes we have made to the file and we then have to commit the changes
using 'git commit' command and to check what changes we have introduced use 'git log' command.


What are some situations when branches would be helpful in keeping your history organized? How would branches help?

Branching is helpful when you want to test a feature you want to add but you are not sure whether this feature will work or not.
so in this case you make a branch of the main i.e.,master ,since we don't want to make changes to the master directly ,we only want to
test the feature.
so in this manner branches help in not manipulating the actual main data of the file.we can create a branch of the master and make changes or
any test you want to make.